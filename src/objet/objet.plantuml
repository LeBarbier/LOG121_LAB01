@startuml

title __OBJET's Class Diagram__\n

  namespace objet {
    class objet.Composante {
        + cheminICone : String
        + nom : String
        + Composante()
        {static} - obtenirCheminIconeComposante()
    }
  }
  

  namespace objet {
    class objet.Entrepot {
        + typeEntreposage : String
        ~ limiteEntreposage : int
        + Entrepot()
        + ajouterComposanteEnInventaire()
        + update()
    }
  }
  

  namespace objet {
    class objet.Model {
        {static} ~ db : DocumentBuilder
        {static} ~ dbf : DocumentBuilderFactory
        {static} ~ doc : Document
        {static} ~ matriceDonneeSimulation : String[][]
        {static} + initialiserDocumentReader()
        {static} + initialiserDocumentReader()
        {static} + obtenirConfigFichierSimulation()
        {static} + obtenirDonneeMetadata()
        {static} + obtenirDonneeSimulationChemin()
        {static} + obtenirDonneeSimulationUsine()
        {static} - obtenirListePathsIcones()
    }
  }
  

  namespace objet {
    abstract class objet.Noeud {
        + iconeActuelle : String
        + id : int
        + posX : int
        + posY : int
        # listeCheminIcone : String[]
        # tempsConstruction : int
        ~ composanteEntreeInventaire : Map<String, Integer>
        + ajouterComposanteEnInventaire()
        ~ evaluerIndicateur()
    }
  }
  

  namespace objet {
    interface objet.StrategieVente {
        {abstract} + vendreAvion()
    }
  }
  

  namespace objet {
    class objet.UsineAssemblage {
        ~ composanteEntreeNecessaire : Map<String, Integer>
        - dureeProduction : int
        + UsineAssemblage()
        + update()
        - assemblerPiece()
        - possedePieceNecessaire()
    }
  }
  

  namespace objet {
    class objet.UsineProduction {
        ~ dureeProduction : int
        + UsineProduction()
        + ajouterComposanteEnInventaire()
        + update()
        - assemblerPiece()
    }
  }
  

  namespace objet {
    class objet.venteAleatoire {
        + vendreAvion()
    }
  }
  

  namespace objet {
    class objet.venteIntervalleFixe {
        + vendreAvion()
    }
  }
  

  objet.Entrepot -up-|> objet.Noeud
  objet.Entrepot o-- objet.StrategieVente : strategieVente
  objet.Noeud .up.|> java.util.Observer
  objet.UsineAssemblage -up-|> objet.Noeud
  objet.UsineAssemblage o-- objet.Composante : composanteSortie
  objet.UsineProduction -up-|> objet.Noeud
  objet.UsineProduction o-- objet.Composante : composanteSortie
  objet.venteAleatoire .up.|> objet.StrategieVente
  objet.venteIntervalleFixe .up.|> objet.StrategieVente


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
